{
  "filename": "quick_start.md",
  "__html": "<h2>compile</h2>\n<pre><code>mvn clean package \n</code></pre>\n<h2>deploy</h2>\n<p>environment requirementsï¼š</p>\n<p>mysql\njava(1.8+)\nIn the dist directory, you can find the file tubemq-manager-bin.zip</p>\n<pre><code>unzip tubemq-manager-bin.zip\n</code></pre>\n<p>Add mysql information in conf/application.properties:</p>\n<pre><code>spring.jpa.hibernate.ddl-auto=update\n# configuration for manager\nspring.datasource.url=jdbc:mysql://x.x.x.x:3306/tubemanager\nspring.datasource.username=xx\nspring.datasource.password=xxx\n</code></pre>\n<p>Add the database tubemanager and start:</p>\n<pre><code>bin/start-manager.sh\n</code></pre>\n<h2>use</h2>\n<h3>create cluster</h3>\n<p>Before using tubeAdmin to operate the cluster, you first need to register the cluster information, and use the following interface to add a cluster:\n/v1/cluster?method=add</p>\n<pre><code>POST\n</code></pre>\n<p>parameter:</p>\n<pre><code>{\n&quot;masterIp&quot;: &quot;9.23.28.86&quot;,   (tube master ip)\n&quot;clusterName&quot;: &quot;test&quot;,    \n&quot;masterPort&quot;: &quot;8000&quot;,  (tube master port)\n&quot;masterWebPort&quot;: &quot;8080&quot;,  (tube master web port)\n&quot;createUser&quot;: &quot;test&quot;,  \n&quot;token&quot;: &quot;abc&quot;  (tube token)\n}\n</code></pre>\n<h3>Operation interface</h3>\n<h4>cluster</h4>\n<p>Query full data of clusterId and clusterName (get)</p>\n<p>Example\nGET\n/v1/cluster</p>\n<p>return value</p>\n<pre><code>{\n&quot;errMsg&quot;: &quot;&quot;,\n&quot;errCode&quot;: 0,\n&quot;result&quot;: true,\n&quot;data&quot;: &quot;[{\\&quot;clusterId\\&quot;:1,\\&quot;clusterName\\&quot;:\\&quot;1124\\&quot;, \\&quot;masterIp\\&quot;:\\&quot;127.0.0.1\\&quot;}]&quot;\n}\n</code></pre>\n<h4>topic</h4>\n<h5>add topicTask</h5>\n<p>parameter:</p>\n<pre><code>type\t (required) request type, fill in the field: op_query\nclusterId\t(required) Request cluster id\naddTopicTasks (required) topicTasks, create task task json\nuser\t(required) After the access authorization verification needs to verify the user, it is reserved here\n</code></pre>\n<p>addTopicTasks currently only includes one field as topicName\nAfter accessing the region design, a new region field will be added to represent brokers in different regions\nCurrently an addTopicTask will create topics in all brokers in the cluster</p>\n<p>AddTopicTasks is a list of the following objects, which can carry multiple create topic requests</p>\n<pre><code>topicName (required) topic name\n</code></pre>\n<p>Example</p>\n<p>POST\n/v1/task?method=addTopicTask</p>\n<pre><code>{\n&quot;clusterId&quot;: &quot;1&quot;,\n&quot;addTopicTasks&quot;: [{&quot;topicName&quot;: &quot;1&quot;}],\n&quot;user&quot;: &quot;test&quot;\n}\n</code></pre>\n<p>return json</p>\n<pre><code>{\n&quot;errMsg&quot;: &quot;There are topic tasks [a12322] already in adding status&quot;,\n&quot;errCode&quot;: 200,\n&quot;result&quot;: false,\n&quot;data&quot;: &quot;&quot;\n}\n</code></pre>\n<p>If result is false, the writing task failed</p>\n<h5>Query whether a topic is successfully created (business can be written)</h5>\n<pre><code>clusterId\t(Required) Request cluster id\ntopicName   (Required) Query topic name\nuser\t(Required) After the access authorization verification needs to verify the user, it is reserved here\n</code></pre>\n<p>example</p>\n<p>POST</p>\n<pre><code>/v1/topic?method=queryCanWrite\n{\n&quot;clusterId&quot;: &quot;2&quot;,\n&quot;topicName&quot;: &quot;pzrTestss1123123&quot;,\n&quot;user&quot;: &quot;test&quot;\n}\n</code></pre>\n<p>return json</p>\n<pre><code>{ &quot;result&quot;:true, &quot;errCode&quot;:0, &quot;errMsg&quot;:&quot;OK&quot;, }\n{ &quot;result&quot;:false, &quot;errCode&quot;: 100, &quot;errMsg&quot;:&quot;topic thirty5is not writable&quot;}\n{ &quot;result&quot;:false, &quot;errCode&quot;: 101, &quot;errMsg&quot;:&quot;no such topic in master&quot;}\n</code></pre>\n<p>result is false as not writable</p>\n",
  "link": "/en-us/docs/modules/tubemq/tubemq-manager/quick_start.html",
  "meta": {}
}