{
  "filename": "quick_start.md",
  "__html": "<h2>1 Deploy and Start</h2>\n<h3>1.1 Configuration Example</h3>\n<p>There're two components in the cluster: <strong>Master</strong> and <strong>Broker</strong>. Master and Broker\ncan be deployed on the same server or different servers. In this example, we setup our cluster\nlike this, and all services run on the same node. Zookeeper should be setup in your environment also.</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>TCP Port</th>\n<th>TLS Port</th>\n<th>Web Port</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>8099</td>\n<td>8199</td>\n<td>8080</td>\n<td>Meta data is stored at /stage/meta_data</td>\n</tr>\n<tr>\n<td>Broker</td>\n<td>8123</td>\n<td>8124</td>\n<td>8081</td>\n<td>Message is stored at /stage/msg_data</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>2181</td>\n<td></td>\n<td></td>\n<td>Offset is stored at /tubemq</td>\n</tr>\n</tbody>\n</table>\n<h3>1.2 Prerequisites</h3>\n<ul>\n<li>ZooKeeper Cluster</li>\n</ul>\n<p>After you extract the package file, here's the folder structure.</p>\n<pre><code>/INSTALL_PATH/inlong-tubemq-server/\n├── bin\n├── conf\n├── lib\n├── logs\n└── resources\n</code></pre>\n<h3>1.3 Configure Master</h3>\n<p>You can change configurations in <code>conf/master.ini</code> according to cluster information.</p>\n<ul>\n<li>Master IP and Port</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[master]</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                  // replaced with your server IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8099</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attr\">metaDataPath</span>=/stage/meta_data\n</code></pre>\n<ul>\n<li>Access Authorization Token</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">confModAuthToken</span>=abc                    // for configuring Web Resources\\API etc\n</code></pre>\n<ul>\n<li>ZooKeeper Cluster</li>\n</ul>\n<pre><code class=\"language-ini\">[zookeeper]                             // Master and Broker in the same cluster must use the same zookeeper environment and have the same configuration\nzkNodeRoot=/tubemq\nzkServerAddr=localhost:2181             // multi zookeeper addresses can separate with \",\"\n</code></pre>\n<ul>\n<li>Replication Strategy</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[replication]</span>\n<span class=\"hljs-attr\">repGroupName</span>=tubemqGroup1                // The Master of the same cluster must use the same group name, and the group names of different clusters must be different\n<span class=\"hljs-attr\">repNodeName</span>=tubemqGroupNode1             // The master node names of the same cluster must be different names\n<span class=\"hljs-attr\">repHelperHost</span>=FIRST_MASTER_NODE_IP:<span class=\"hljs-number\">9001</span>  // helperHost is used for building HA master.\n</code></pre>\n<ul>\n<li>(Optional) Master High Availability\nIn the example above, we run the services on a single node. However, in real production environment, you\nneed to run multiple master services on different servers for high availability purpose. Here's\nthe introduction of availability level.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HA Level</th>\n<th>Master Number</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>High</td>\n<td>3 masters</td>\n<td>After any master crashed, the cluster meta data is still in read/write state and can accept new producers/consumers.</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>2 masters</td>\n<td>After one master crashed, the cluster meta data is in read only state. There's no affect on existing producers and consumers.</td>\n</tr>\n<tr>\n<td>Minimum</td>\n<td>1 master</td>\n<td>After the master crashed, there's no affect on existing producer and consumer.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Tips</strong>：Please notice that the master servers should be clock synchronized.</p>\n<h3>1.4 Configure Broker</h3>\n<p>You can change configurations in <code>conf/broker.ini</code> according to cluster information.</p>\n<ul>\n<li>Broker IP and Port</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[broker]</span>\n<span class=\"hljs-attr\">brokerId</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                 // replaced with your server IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8123</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8081</span>\n</code></pre>\n<ul>\n<li>Master Address</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">masterAddressList</span>=MASTER_NODE_IP1:<span class=\"hljs-number\">8099</span>,MASTER_NODE_IP2:<span class=\"hljs-number\">8099</span>   // multi addresses can separate with <span class=\"hljs-string\">\",\"</span>\n</code></pre>\n<ul>\n<li>Metadata Path</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">primaryPath</span>=/stage/msg_data\n</code></pre>\n<ul>\n<li>ZooKeeper Cluster</li>\n</ul>\n<pre><code class=\"language-ini\">[zookeeper]                             // Master and Broker in the same cluster must use the same zookeeper environment and have the same configuration\nzkNodeRoot=/tubemq\nzkServerAddr=localhost:2181             // multi zookeeper addresses can separate with \",\"\n</code></pre>\n<h3>1.5 Start Master</h3>\n<p>Please go to the <code>bin</code> folder and run this command to start\nthe master service.</p>\n<pre><code class=\"language-bash\">./tubemq.sh master start\n</code></pre>\n<p>You should be able to access <code>http://your-master-ip:8080</code> to see the\nweb GUI now.</p>\n<p><img src=\"img/tubemq-console-gui.png\" alt=\"TubeMQ Console GUI\"></p>\n<h4>1.5.1 Configure Broker Metadata</h4>\n<p>Before we start a broker service, we need to configure it on master web GUI first. Go to the <code>Broker List</code> page, click <code>Add Single Broker</code>, and input the new broker information.</p>\n<p><img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 1\"></p>\n<p>In this example, we only need to input broker IP and authToken:</p>\n<ol>\n<li>broker IP: broker server ip</li>\n<li>authToken: A token pre-configured in the <code>conf/master.ini</code> file. Please check the\n<code>confModAuthToken</code> field in your <code>master.ini</code> file.</li>\n</ol>\n<p>Click the online link to activate the new added broker.</p>\n<p><img src=\"img/tubemq-add-broker-2.png\" alt=\"Add Broker 2\"></p>\n<h3>1.6 Start Broker</h3>\n<p>Please go to the <code>bin</code> folder and run this command to start the broker service</p>\n<pre><code class=\"language-bash\">./tubemq.sh broker start\n</code></pre>\n<p>Refresh the GUI broker list page, you can see that the broker now is registered.</p>\n<p>After the sub-state of the broker changed to <code>idle</code>, we can add topics to that broker.</p>\n<p><img src=\"img/tubemq-add-broker-3.png\" alt=\"Add Broker 3\"></p>\n<h2>2 Quick Start</h2>\n<h3>3.1 Add Topic</h3>\n<p>We can add or manage the cluster topics on the web GUI. To add a new topic, go to the\ntopic list page and click the add new topic button</p>\n<p><img src=\"img/tubemq-add-topic-1.png\" alt=\"Add Topic 1\"></p>\n<p>Then select the brokers which you want to deploy the topics to.</p>\n<p><img src=\"img/tubemq-add-topic-5.png\" alt=\"Add Topic 5\"></p>\n<p>We can see the publish and subscribe state of the new added topic is still grey. We need\nto go to the broker list page to reload the broker configuration.</p>\n<p><img src=\"img/tubemq-add-topic-6.png\" alt=\"Add Topic 6\"></p>\n<p><img src=\"img/tubemq-add-topic-2.png\" alt=\"Add Topic 2\"></p>\n<p>When the broker sub-state changed to idle, go to the topic list page. We can see\nthat the topic publish/subscribe state is active now.</p>\n<p><img src=\"img/tubemq-add-topic-3.png\" alt=\"Add Topic 3\"></p>\n<p><img src=\"img/tubemq-add-topic-4.png\" alt=\"Add Topic 4\"></p>\n<p>Now we can use the topic to send messages.</p>\n<h3>2.2 Run Example</h3>\n<p>Now we can use <code>demo</code> topic which created before to test our cluster.</p>\n<h4>2.2.1 Produce Messages</h4>\n<p>Please don't forget replace <code>YOUR_MASTER_IP:port</code> with your server ip and port, and start producer.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> /INSTALL_PATH/apache-inlong-tubemq-server-[TUBEMQ-VERSION]-bin\n./bin/tubemq-producer-test.sh --master-servers YOUR_MASTER_IP1:port,YOUR_MASTER_IP2:port --topicName demo\n</code></pre>\n<p>From the log, we can see the message is sent out.\n<img src=\"img/tubemq-send-message.png\" alt=\"Demo 1\"></p>\n<h4>2.2.2 Consume Messages</h4>\n<p>Please don't forget replace YOUR_MASTER_IP:port with your server ip and port, and start consumer.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> /INSTALL_PATH/apache-inlong-tubemq-server-[TUBEMQ-VERSION]-bin\n./bin/tubemq-consumer-test.sh --master-servers YOUR_MASTER_IP1:port,YOUR_MASTER_IP2:port --topicName demo --groupName test_consume\n</code></pre>\n<p>From the log, we can see the message received by the consumer.\n<img src=\"img/tubemq-consume-message.png\" alt=\"Demo 2\"></p>\n<h2>3 The End</h2>\n<p>Here, the compilation, deployment, system configuration, startup, production and consumption of TubeMQ have been completed. If you need to understand more in-depth content, please check the relevant content in &quot;TubeMQ HTTP API&quot; and make the corresponding configuration settings.</p>\n<hr>\n",
  "link": "/en-us/docs/modules/tubemq/quick_start.html",
  "meta": {
    "title": "Quick Start - Apache InLong's TubeMQ module"
  }
}