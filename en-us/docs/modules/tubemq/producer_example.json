{
  "filename": "producer_example.md",
  "__html": "<h2>1 Producer Example</h2>\n<p>TubeMQ provides two ways to initialize session factory, TubeSingleSessionFactory and TubeMultiSessionFactory:</p>\n<ul>\n<li>TubeSingleSessionFactory creates only one session in the lifecycle, this is very useful in streaming scenarios.</li>\n<li>TubeMultiSessionFactory creates new session on every call.</li>\n</ul>\n<h3>1.1 TubeSingleSessionFactory</h3>\n<h4>1.1.1 Send Message Synchronously</h4>\n<pre><code>```java\n\npublic final class SyncProducerExample {\n\n    public static void main(String[] args) throws Throwable {\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final TubeClientConfig clientConfig = new TubeClientConfig(masterHostAndPort);\n        final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(clientConfig);\n        final MessageProducer messageProducer = messageSessionFactory.createProducer();\n        final String topic = &quot;test&quot;;\n        final String body = &quot;This is a test message from single-session-factory!&quot;;\n        byte[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        Message message = new Message(topic, bodyData);\n        MessageSentResult result = messageProducer.sendMessage(message);\n        if (result.isSuccess()) {\n            System.out.println(&quot;sync send message : &quot; + message);\n        }\n        messageProducer.shutdown();\n    }\n}\n```\n</code></pre>\n<p>####1.1.2 Send Message Asynchronously\n```java\npublic final class AsyncProducerExample {</p>\n<pre><code>    public static void main(String[] args) throws Throwable {\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final TubeClientConfig clientConfig = new TubeClientConfig(masterHostAndPort);\n        final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(clientConfig);\n        final MessageProducer messageProducer = messageSessionFactory.createProducer();\n        final String topic = &quot;test&quot;;\n        final String body = &quot;async send message from single-session-factory!&quot;;\n        byte[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        final Message message = new Message(topic, bodyData);\n        messageProducer.sendMessage(message, new MessageSentCallback(){\n            @Override\n            public void onMessageSent(MessageSentResult result) {\n                if (result.isSuccess()) {\n                    System.out.println(&quot;async send message : &quot; + message);\n                } else {\n                    System.out.println(&quot;async send message failed : &quot; + result.getErrMsg());\n                }\n            }\n            @Override\n            public void onException(Throwable e) {\n                System.out.println(&quot;async send message error : &quot; + e);\n            }\n        });\n        messageProducer.shutdown();\n    }\n\n}\n```\n</code></pre>\n<h4>1.1.3 Send Message With Attributes</h4>\n<pre><code>```java\npublic final class ProducerWithAttributeExample {\n \n    public static void main(String[] args) throws Throwable {\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final TubeClientConfig clientConfig = new TubeClientConfig(masterHostAndPort);\n        final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(clientConfig);\n        final MessageProducer messageProducer = messageSessionFactory.createProducer();\n        final String topic = &quot;test&quot;;\n        final String body = &quot;send message with attribute from single-session-factory!&quot;;\n        byte[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        Message message = new Message(topic, bodyData);\n        //set attribute\n        message.setAttrKeyVal(&quot;test_key&quot;, &quot;test value&quot;);\n        //msgType is used for consumer filtering, and msgTime(accurate to minute) is used as the pipe to send and receive statistics\n        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);\n        message.putSystemHeader(&quot;test&quot;, sdf.format(new Date()));\n        messageProducer.sendMessage(message);\n        messageProducer.shutdown();\n    }\n\n}\n```\n</code></pre>\n<h3>1.2 TubeMultiSessionFactory</h3>\n<pre><code>```java\npublic class MultiSessionProducerExample {\n    \n    public static void main(String[] args) throws Throwable {\n        final int SESSION_FACTORY_NUM = 10;\n        final String masterHostAndPort = &quot;localhost:8000&quot;;\n        final TubeClientConfig clientConfig = new TubeClientConfig(masterHostAndPort);\n        final List&lt;MessageSessionFactory&gt; sessionFactoryList = new ArrayList&lt;&gt;(SESSION_FACTORY_NUM);\n        final ExecutorService sendExecutorService = Executors.newFixedThreadPool(SESSION_FACTORY_NUM);\n        final CountDownLatch latch = new CountDownLatch(SESSION_FACTORY_NUM);\n        for (int i = 0; i &lt; SESSION_FACTORY_NUM; i++) {\n            TubeMultiSessionFactory tubeMultiSessionFactory = new TubeMultiSessionFactory(clientConfig);\n            sessionFactoryList.add(tubeMultiSessionFactory);\n            MessageProducer producer = tubeMultiSessionFactory.createProducer();\n            Sender sender = new Sender(producer, latch);\n            sendExecutorService.submit(sender);\n        }\n        latch.await();\n        sendExecutorService.shutdownNow();\n        for (MessageSessionFactory sessionFactory : sessionFactoryList) {\n            sessionFactory.shutdown();\n        }\n    }\n\n    private static class Sender implements Runnable {\n        \n        private MessageProducer producer;\n        \n        private CountDownLatch latch;\n\n        public Sender(MessageProducer producer, CountDownLatch latch) {\n            this.producer = producer;\n            this.latch = latch;\n        }\n\n        @Override\n        public void run() {\n            final String topic = &quot;test&quot;;\n            try {\n                producer.publish(topic);\n                final byte[] bodyData = StringUtils.getBytesUtf8(&quot;This is a test message from multi-session factory&quot;);\n                Message message = new Message(topic, bodyData);\n                producer.sendMessage(message);\n                producer.shutdown();\n            } catch (Throwable ex) {\n                System.out.println(&quot;send message error : &quot; + ex);\n            } finally {\n                latch.countDown();\n            }\n        }\n    }\n}\n```\n</code></pre>\n<hr>\n<p><a href=\"#top\">Back to top</a></p>\n",
  "link": "/en-us/docs/modules/tubemq/producer_example.html",
  "meta": {
    "title": "Producer Example - Apache InLong's TubeMQ module"
  }
}