{
  "filename": "quick_start.md",
  "__html": "<h2>部署运行</h2>\n<h3>1.1 配置示例</h3>\n<p>TubeMQ 集群包含有两个组件: <strong>Master</strong> 和 <strong>Broker</strong>. Master 和 Broker 可以部署在相同或者不同的节点上，依照业务对机器的规划进行处理。我们通过如下3台机器搭建有2台Master的生产、消费的集群进行配置示例：</p>\n<table>\n<thead>\n<tr>\n<th>所属角色</th>\n<th>TCP端口</th>\n<th>TLS端口</th>\n<th>WEB端口</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>8099</td>\n<td>8199</td>\n<td>8080</td>\n<td>元数据存储在<code>/stage/meta_data</code></td>\n</tr>\n<tr>\n<td>Broker</td>\n<td>8123</td>\n<td>8124</td>\n<td>8081</td>\n<td>消息储存在<code>/stage/msg_data</code></td>\n</tr>\n<tr>\n<td>ZooKeeper</td>\n<td>2181</td>\n<td></td>\n<td></td>\n<td>Offset储存在根目录<code>/tubemq</code></td>\n</tr>\n</tbody>\n</table>\n<h3>1.2 准备工作</h3>\n<ul>\n<li>ZooKeeper集群</li>\n</ul>\n<p>选择安装路径后，安装包解压后的目录结构如下：</p>\n<pre><code>/INSTALL_PATH/inlong-tubemq-server/\n├── bin\n├── conf\n├── lib\n├── logs\n└── resources\n</code></pre>\n<h3>1.3 配置Master</h3>\n<p>编辑<code>conf/master.ini</code>，根据集群信息变更以下配置项</p>\n<ul>\n<li>Master IP和端口</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[master]</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                   // 替换为当前主机IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8099</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attr\">metaDataPath</span>=/stage/meta_data\n</code></pre>\n<ul>\n<li>访问授权Token</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">confModAuthToken</span>=abc                     // 该token用于页面配置、API调用等\n</code></pre>\n<ul>\n<li>ZooKeeper集群地址</li>\n</ul>\n<pre><code class=\"language-ini\">[zookeeper]                              // 同一个集群里Master和Broker必须使用同一套zookeeper环境，且配置一致\nzkNodeRoot=/tubemq\nzkServerAddr=localhost:2181              // 指向zookeeper集群，多个地址逗号分开\n</code></pre>\n<ul>\n<li>配置Replication策略</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[replication]</span>\n<span class=\"hljs-attr\">repGroupName</span>=tubemqGroup1                // 同一个集群的Master必须要用同一个组名，且不同集群的组名必须不同 \n<span class=\"hljs-attr\">repNodeName</span>=tubemqGroupNode1             // 同一个集群的master节点名必须是不同的名称\n<span class=\"hljs-attr\">repHelperHost</span>=FIRST_MASTER_NODE_IP:<span class=\"hljs-number\">9001</span>  // helperHost用于创建master集群，一般配置第一个master节点ip\n</code></pre>\n<ul>\n<li>（可选）生产环境，多master HA级别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HA级别</th>\n<th>Master数量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高</td>\n<td>3 masters</td>\n<td>任何主节点崩溃后，集群元数据仍处于读/写状态，可以接受新的生产者/消费者。</td>\n</tr>\n<tr>\n<td>中</td>\n<td>2 masters</td>\n<td>一个主节点崩溃后，集群元数据处于只读状态。对现有的生产者和消费者没有任何影响。</td>\n</tr>\n<tr>\n<td>低</td>\n<td>1 master</td>\n<td>主节点崩溃后，对现有的生产者和消费者没有影响。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：需保证Master所有节点之间的时钟同步</p>\n<h3>1.4 配置Broker</h3>\n<p>编辑<code>conf/broker.ini</code>，根据集群信息变更以下配置项</p>\n<ul>\n<li>Broker IP和端口</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[broker]</span>\n<span class=\"hljs-attr\">brokerId</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                 // 替换为当前主机IP，broker目前只支持IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8123</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8081</span>\n</code></pre>\n<ul>\n<li>Master地址</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">masterAddressList</span>=YOUR_MASTER_IP1:<span class=\"hljs-number\">8099</span>,YOUR_MASTER_IP2:<span class=\"hljs-number\">8099</span>   //多个master以逗号分隔\n</code></pre>\n<ul>\n<li>数据目录</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">primaryPath</span>=/stage/msg_data\n</code></pre>\n<ul>\n<li>ZooKeeper集群地址</li>\n</ul>\n<pre><code class=\"language-ini\">[zookeeper]                             // 同一个集群里Master和Broker必须使用同一套zookeeper环境，且配置一致\nzkNodeRoot=/tubemq                      \nzkServerAddr=localhost:2181             // 指向zookeeper集群，多个地址逗号分开\n</code></pre>\n<h3>1.5 启动Master</h3>\n<p>进入Master节点的 <code>bin</code> 目录下，启动服务:</p>\n<pre><code class=\"language-bash\">./tubemq.sh master start\n</code></pre>\n<p>访问Master的管控台 <code>http://YOUR_MASTER_IP:8080</code> ，页面可查则表示master已成功启动:\n<img src=\"img/tubemq-console-gui.png\" alt=\"TubeMQ Console GUI\"></p>\n<h4>1.5.1 配置Broker元数据</h4>\n<p>Broker启动前，首先要在Master上配置Broker元数据，增加Broker相关的管理信息。在<code>Broker List</code> 页面,  <code>Add Single Broker</code>，然后填写相关信息:</p>\n<p><img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 1\"></p>\n<p>需要填写的内容包括：</p>\n<ol>\n<li>broker IP: broker server ip</li>\n<li>authToken:  <code>conf/master.ini</code> 文件中 <code>confModAuthToken</code> 字段配置的 token</li>\n</ol>\n<p>然后上线Broker：\n<img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 2\"></p>\n<h3>1.6 启动Broker</h3>\n<p>进入broker节点的 <code>bin</code> 目录下，执行以下命令启动Broker服务：</p>\n<pre><code class=\"language-bash\">./tubemq.sh broker start\n</code></pre>\n<p>刷新页面可以看到 Broker 已经注册，当 <code>当前运行子状态</code> 为 <code>idle</code> 时， 可以增加topic:\n<img src=\"img/tubemq-add-broker-3.png\" alt=\"Add Broker 3\"></p>\n<h2>3 快速使用</h2>\n<h3>3.1 新增 Topic</h3>\n<p>可以通过 web GUI 添加 Topic， 在 <code>Topic列表</code>页面添加，需要填写相关信息，比如增加<code>demo</code> topic：\n<img src=\"img/tubemq-add-topic-1.png\" alt=\"Add Topic 1\"></p>\n<p>然后选择部署 Topic 的 Broker\n<img src=\"img/tubemq-add-topic-5.png\" alt=\"Add Topic 5\"></p>\n<p>此时 Broker的 <code>可发布</code> 和 <code>可订阅</code> 依旧是灰色的\n<img src=\"img/tubemq-add-topic-6.png\" alt=\"Add Topic 6\"></p>\n<p>需要在 <code>Broker列表</code>页面重载Broker 配置\n<img src=\"img/tubemq-add-topic-2.png\" alt=\"Add Topic 2\"></p>\n<p><img src=\"img/tubemq-add-topic-3.png\" alt=\"Add Topic 3\"></p>\n<p>之后就可以在页面查看Topic信息。</p>\n<p><img src=\"img/tubemq-add-topic-4.png\" alt=\"Add Topic 4\"></p>\n<h3>2.2 运行Example</h3>\n<p>可以通过上面创建的<code>demo</code> topic来测试集群。</p>\n<h4>2.2.1 生产消息</h4>\n<p>将 <code>YOUR_MASTER_IP:port</code> 替换为实际的IP和端口，然后运行producer:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> /INSTALL_PATH/apache-inlong-tubemq-server-[TUBEMQ-VERSION]-bin\n./bin/tubemq-producer-test.sh --master-servers YOUR_MASTER_IP1:port,YOUR_MASTER_IP2:port --topicName demo\n</code></pre>\n<p>如果能观察下如下日志，则表示数据发送成功：\n<img src=\"img/tubemq-send-message.png\" alt=\"Demo 1\"></p>\n<h4>2.2.2 消费消息</h4>\n<p>将 <code>YOUR_MASTER_IP:port</code> 替换为实际的IP和端口，然后运行Consumer:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> /INSTALL_PATH/apache-inlong-tubemq-server-[TUBEMQ-VERSION]-bin\n./bin/tubemq-consumer-test.sh --master-servers YOUR_MASTER_IP1:port,YOUR_MASTER_IP2:port --topicName demo --groupName test_consume\n</code></pre>\n<p>如果能观察下如下日志，则表示数据被消费者消费到：</p>\n<p><img src=\"img/tubemq-consume-message.png\" alt=\"Demo 2\"></p>\n<h2>3 结束</h2>\n<p>在这里，已经完成了TubeMQ的编译，部署，系统配置，启动，生产和消费。如果需要了解更深入的内容，请查看《TubeMQ HTTP API》里的相关内容，进行相应的配置设置。</p>\n<hr>\n<p><a href=\"#top\">Back to top</a></p>\n",
  "link": "/zh-cn/docs/modules/tubemq/quick_start.html",
  "meta": {
    "快速开始 - Apache InLong TubeMQ模块": ""
  }
}