{
  "filename": "consumer_example.md",
  "__html": "<h2>1 Consumer 示例</h2>\n<p>TubeMQ 提供了两种方式来消费消息： PullConsumer and PushConsumer。</p>\n<h3>1.1 PullConsumer</h3>\n<pre><code class=\"language-java\"> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PullConsumerExample</span> </span>{\n\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n         <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n         <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n         <span class=\"hljs-keyword\">final</span> String group = <span class=\"hljs-string\">\"test-group\"</span>;\n         <span class=\"hljs-keyword\">final</span> ConsumerConfig consumerConfig = <span class=\"hljs-keyword\">new</span> ConsumerConfig(masterHostAndPort, group);\n         consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);\n         <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(consumerConfig);\n         <span class=\"hljs-keyword\">final</span> PullMessageConsumer messagePullConsumer = messageSessionFactory.createPullConsumer(consumerConfig);\n         messagePullConsumer.subscribe(topic, <span class=\"hljs-keyword\">null</span>);\n         messagePullConsumer.completeSubscribe();\n         <span class=\"hljs-comment\">// wait for client to join the exact consumer queue that consumer group allocated</span>\n         <span class=\"hljs-keyword\">while</span> (!messagePullConsumer.isPartitionsReady(<span class=\"hljs-number\">1000</span>)) {\n             ThreadUtils.sleep(<span class=\"hljs-number\">1000</span>);\n         }\n         <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n             ConsumerResult result = messagePullConsumer.getMessage();\n             <span class=\"hljs-keyword\">if</span> (result.isSuccess()) {\n                 List&lt;Message&gt; messageList = result.getMessageList();\n                 <span class=\"hljs-keyword\">for</span> (Message message : messageList) {\n                     System.out.println(<span class=\"hljs-string\">\"received message : \"</span> + message);\n                 }\n                 messagePullConsumer.confirmConsume(result.getConfirmContext(), <span class=\"hljs-keyword\">true</span>);\n             }\n         }\n     }   \n\n }\n</code></pre>\n<h3>1.2 PushConsumer</h3>\n<pre><code class=\"language-java\">public class PushConsumerExample {\n\n     public static void test(String[] args) throws Throwable {\n         final String masterHostAndPort = \"localhost:8000\";\n         final String topic = \"test\";\n         final String group = \"test-group\";\n         final ConsumerConfig consumerConfig = new ConsumerConfig(masterHostAndPort, group);\n         consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);\n         final MessageSessionFactory messageSessionFactory = new TubeSingleSessionFactory(consumerConfig);\n         final PushMessageConsumer pushConsumer = messageSessionFactory.createPushConsumer(consumerConfig);\n         pushConsumer.subscribe(topic, null, new MessageListener() {\n\n             @Override\n             public void receiveMessages(PeerInfo peerInfo, List&lt;Message&gt; messages) throws InterruptedException {\n                 for (Message message : messages) {\n                     System.out.println(\"received message : \" + new String(message.getData()));\n                 }\n             }\n\n             @Override\n             public Executor getExecutor() {\n                 return null;\n             }\n\n             @Override\n             public void stop() {\n                 //\n             }\n         });\n         pushConsumer.completeSubscribe();\n         CountDownLatch latch = new CountDownLatch(1);\n         latch.await(10, TimeUnit.MINUTES);\n     }\n }\n ```\n\n---\n\n&lt;a href=\"#top\"&gt;Back to top&lt;/a&gt;\n</code></pre>\n",
  "link": "/zh-cn/docs/modules/tubemq/consumer_example.html",
  "meta": {
    "消费者示例 - Apache InLong TubeMQ模块": ""
  }
}