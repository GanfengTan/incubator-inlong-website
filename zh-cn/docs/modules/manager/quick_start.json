{
  "filename": "quick_start.md",
  "__html": "<hr>\n<h2>快速开始 - Apache inlong-manager</h2>\n<h1>1. 编译</h1>\n<ul>\n<li>环境准备：已正确安装 Java（1.8+）、Maven（3.3+） 工具。</li>\n<li>通过 macOS 的终端（或 Windows 的 cmd）进入项目根目录<code>Inlong</code>执行编译打包命令：</li>\n</ul>\n<pre><code>mvn clean package -DskipTests\n</code></pre>\n<ul>\n<li>进入Inlong-manager子项目<code>inlong-manager</code> 目录，运行以下 Maven 命令打包项目，仅编译打包manager子项目：</li>\n</ul>\n<pre><code>mvn clean package -DskipTests\n</code></pre>\n<ul>\n<li>正确打包完成后，可在各个子模块的 <code>target</code> 目录下看到打好的tar包，manager-web-xxx-incubating-SNAPSHOT.tar.gz</li>\n</ul>\n<h1>2 依赖准备</h1>\n<h2>2.1 数据库初始化</h2>\n<ul>\n<li>基于mysql 5.7+，提前创建好数据库，如<code>CREATE DATABASE IF NOT EXISTS inlong; USE inlong</code>， 并导入inlong-manager/doc/sql/apache_inlong_manager.sql完成表结构及基础数据的初始化</li>\n<li>修改inlong-manager/manager-web/src/resources/application-xx.yml中数据库连接地址</li>\n<li>zookeeper 3.5+ ，信息配置到inlong-manager/manager-web/src/resources/application-xx.yml文件对应位置</li>\n<li>Tube集群信息，修改inlong-manager/manager-web/src/resources/application-xx.yml中tube相关配置信息</li>\n<li>hadoop2.10.x 集群 , hive 2.3.x需提前构建并启动完成</li>\n</ul>\n<h1>3. 后台服务部署&amp;启动</h1>\n<h2>3.1 manager-web部署</h2>\n<ul>\n<li>（1）找到安装包,进入 /apache-inlong/inlong-manager/manager-web/target 找到 manager-web-xxx-incubating-SNAPSHOT.tar.gz</li>\n<li>（2）部署安装包,压到即将部署服务的服务器对应目录  tar -zxvf manager-web-xxx-incubating-SNAPSHOT.tar.gz</li>\n<li>（3） 修改配置文件，将manager-web/conf中的配置文件, 以application.yml中profile.active=dev为例，将application-dev.yml文件按真实内容修改</li>\n<li>（4）启动服务，执行bin目录下的start.sh脚本，观察日志manager-web/log/manager-web.log和后端端口是否正常监听，manager-web默认使用8083端口</li>\n</ul>\n<h2>3.2 manager-openapi部署</h2>\n<ul>\n<li>（1） 找到安装包,进入 /apache-inlong/inlong-manager/manager-openapi/target 找到 manager-openapi-xxx-incubating-SNAPSHOT.tar.gz</li>\n<li>（2） 部署安装包,压到即将部署服务的服务器对应目录  tar -zxvf manager-web-0.9.0-incubating-SNAPSHOT.tar.gz</li>\n<li>（3）修改配置文件，将manager-openapi/conf中的配置文件, 以application.yml中profile.active=dev为例，将配置application-dev.yml文件内容改为真实内容</li>\n<li>（4）启动服务，执行bin目录下的start.sh脚本，观察日志manager-openapi/log/manager-openapi.log和后端端口是否正常监听，manager-openapi默认使用8082端口</li>\n</ul>\n<h2>3.3 后端配置详解</h2>\n<ul>\n<li><code>manager-web/conf/application-xx.yml</code> 示例</li>\n</ul>\n<pre><code class=\"language-yml\">\n<span class=\"hljs-attr\">logging:</span>\n  <span class=\"hljs-attr\">level:</span>\n    <span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">INFO</span>\n    <span class=\"hljs-attr\">org:</span>\n      <span class=\"hljs-attr\">apache:</span>\n        <span class=\"hljs-attr\">inlong:</span>\n          <span class=\"hljs-attr\">manager:</span>\n            <span class=\"hljs-attr\">dao:</span>\n              <span class=\"hljs-attr\">mapper:</span> <span class=\"hljs-string\">debug</span>\n            <span class=\"hljs-attr\">third:</span>\n              <span class=\"hljs-string\">debug</span>\n\n<span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">jdbc-url:</span> <span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/apache_inlong_manager?serverTimezone=GMT%2b8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;characterEncoding=UTF-8&amp;nullCatalogMeansCurrent=true</span>\n    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">xxxxxx</span>\n    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">xxxxxx</span>\n    <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n    <span class=\"hljs-attr\">druid:</span>\n      <span class=\"hljs-comment\"># Configure test query</span>\n      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-string\">'x'</span>\n      <span class=\"hljs-comment\"># Initialization size, minimum, maximum</span>\n      <span class=\"hljs-attr\">initialSize:</span> <span class=\"hljs-number\">20</span>\n      <span class=\"hljs-attr\">minIdle:</span> <span class=\"hljs-number\">20</span>\n      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">300</span>\n      <span class=\"hljs-comment\"># Configure the timeout period to wait for the connection to be acquired</span>\n      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">600000</span>\n      <span class=\"hljs-comment\"># Configure the minimum survival time of a connection in the pool, in milliseconds</span>\n      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">3600000</span>\n      <span class=\"hljs-comment\"># Detect when applying for connection. It is recommended to configure it to true, which does not affect performance and ensures safety</span>\n      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># Perform detection when obtaining a connection, it is recommended to close it, which affects performance</span>\n      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-comment\"># Perform detection when returning the connection, it is recommended to close it, which affects performance</span>\n      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-comment\"># Configure filters for monitoring statistics interception，stat:Monitoring statistics  log4j:log  wall:Defense against SQL injection</span>\n      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall</span>\n      <span class=\"hljs-comment\"># Open the mergeSql function through the connectProperties property；Slow SQL records</span>\n      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span>\n\n<span class=\"hljs-comment\"># InLong configuration</span>\n<span class=\"hljs-attr\">inlong:</span>\n  <span class=\"hljs-attr\">schedule:</span>\n    <span class=\"hljs-attr\">user:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">update-cron:</span> <span class=\"hljs-string\">'0 0 2 * * ?'</span>\n  <span class=\"hljs-attr\">common:</span>\n    <span class=\"hljs-attr\">machineNum:</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">~/</span>\n    <span class=\"hljs-attr\">modules:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">agent</span>\n\n<span class=\"hljs-comment\"># Cluster info</span>\n<span class=\"hljs-attr\">cluster:</span>\n  <span class=\"hljs-attr\">tube:</span>\n    <span class=\"hljs-attr\">manager:</span> <span class=\"hljs-string\">http://127.0.0.1:8081</span>\n    <span class=\"hljs-attr\">master:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8000,127.0.0.1:8010</span>\n  <span class=\"hljs-attr\">zk:</span>\n    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n    <span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">inlong_hive</span>\n  <span class=\"hljs-attr\">hive:</span>\n    <span class=\"hljs-attr\">metastoreAddress:</span> <span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/hive?useSSL=false</span>\n\n</code></pre>\n<h2>3.4 后台服务验证：</h2>\n<p><a href=\"http://x.x.x.x:8083/api/inlong/manager/doc.html#/home\">http://x.x.x.x:8083/api/inlong/manager/doc.html#/home</a></p>\n<p>其中 <code>x.x.x.x</code> 修改为manager-web所部署的机器IP地址</p>\n",
  "link": "/zh-cn/docs/modules/manager/quick_start.html",
  "meta": {}
}