{
  "filename": "quick_start.md",
  "__html": "<h2>编译和构建</h2>\n<h3>准备工作</h3>\n<ul>\n<li>Java JDK 1.7 或 1.8</li>\n<li>Maven 3.3+</li>\n</ul>\n<h3>从源码包构建</h3>\n<ul>\n<li>编译和打包：</li>\n</ul>\n<pre><code class=\"language-bash\">mvn clean package -DskipTests\n</code></pre>\n<ul>\n<li>（可选）使用Docker编译：</li>\n</ul>\n<pre><code class=\"language-bash\">docker run -v REPLACE_WITH_SOURCE_PATH:/tubemq  apachetubemq/tubemq-build clean package -DskipTests\n</code></pre>\n<ul>\n<li>单元测试：</li>\n</ul>\n<pre><code class=\"language-bash\">mvn <span class=\"hljs-built_in\">test</span>\n</code></pre>\n<ul>\n<li>单独对每个 module 进行构建：</li>\n</ul>\n<pre><code class=\"language-bash\">mvn clean install\n<span class=\"hljs-built_in\">cd</span> module-name (比如: tubemq-client)\nmvn <span class=\"hljs-built_in\">test</span>\n</code></pre>\n<p>构建完成之后，在 <code>tubemq-server/target</code> 目录下会有 <strong>tubemq-server-[TUBEMQ-VERSION]-bin.tar.gz</strong> 文件。\n这是 TubeMq 的部署包，包含了脚本、配置文件、依赖以及 web GUI相关的内容。</p>\n<h3>配置IDE开发环境</h3>\n<p>在IDE中构建和调试源码，需要先运行以下命令：</p>\n<pre><code class=\"language-bash\">mvn compile\n</code></pre>\n<p>执行之后，会生成 <code>protoc</code> 文件对应的 java source file，位于 <code>target/generated-sources</code> 目录。</p>\n<p>（可选）如果你打算使用本地的 <code>protoc</code> 可执行文件，你可以修改 <code>tubemq-core/pom.xml</code> 下的 <code>protobuf-maven-plugin</code> 的配置，如下所示。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">outputDirectory</span>&gt;</span>${project.build.directory}/generated-sources/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">outputDirectory</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">protocExecutable</span>&gt;</span>/usr/local/bin/protoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">protocExecutable</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n</code></pre>\n<h2>部署运行</h2>\n<h3>部署TubeMQ Standalone</h3>\n<p>Standalone模式可以在一个容器中启动zookeeper/master/broker服务：</p>\n<pre><code>docker run -p 8080:8080 -p 8000:8000 -p 8123:8123 --name tubemq -d apachetubemq/tubemq-all:latest\n</code></pre>\n<p>容器拉起后，可在浏览器访问<code>http://127.0.0.1:8080</code>，然后参考下面<code>快速使用</code>部分开始使用。</p>\n<p><strong>注意</strong>：Standalone模式只可用于开发和体验，不可作为生产集群。</p>\n<h3>部署TubeMQ集群</h3>\n<h4>准备工作</h4>\n<ul>\n<li>ZooKeeper集群</li>\n<li><a href=\"download/download.md\">tubemq-server-[TUBEMQ-VERSION]-bin.tar.gz</a>安装包</li>\n</ul>\n<p>选择安装路径后，安装包解压后的目录结构如下：</p>\n<pre><code>/INSTALL_PATH/tubemq-server-[TUBEMQ-VERSION]-bin/\n├── bin\n├── conf\n├── lib\n├── logs\n└── resources\n</code></pre>\n<h4>配置示例</h4>\n<p>TubeMQ 集群包含有两个组件: <strong>Master</strong> 和 <strong>Broker</strong>. Master 和 Broker 可以部署在相同或者不同的节点上。下面是\n一个集群的配置示例：</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>TCP Port</th>\n<th>TLS Port</th>\n<th>Web Port</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>8099</td>\n<td>8199</td>\n<td>8080</td>\n<td>元数据存储在 /stage/metadata</td>\n</tr>\n<tr>\n<td>Broker</td>\n<td>8123</td>\n<td>8124</td>\n<td>8081</td>\n<td>消息存储在 /stage/msgdata</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>2181</td>\n<td></td>\n<td></td>\n<td>Offset 存储在 /tubemq</td>\n</tr>\n</tbody>\n</table>\n<h4>配置Master</h4>\n<p>编辑<code>conf/master.ini</code>，根据集群信息变更以下配置项</p>\n<ul>\n<li>Master IP和端口</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[master]</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                  // 替换为当前主机IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8000</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8080</span>\n</code></pre>\n<ul>\n<li>访问授权Token</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">confModAuthToken</span>=abc                    // 该token用于页面配置、API调用等\n</code></pre>\n<ul>\n<li>ZooKeeper集群地址</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>             // 指向zookeeper集群，多个地址逗号分开\n</code></pre>\n<ul>\n<li>配置Replication策略</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[replication]</span>\n<span class=\"hljs-attr\">repNodeName</span>=tubemqMasterGroupNode1       // 每个master节点需使用不同名称\n<span class=\"hljs-attr\">repHelperHost</span>=FIRST_MASTER_NODE_IP:<span class=\"hljs-number\">9001</span>  // helperHost用于创建master集群，一般配置第一个master节点ip\n</code></pre>\n<ul>\n<li>前端安装路径</li>\n</ul>\n<p>编辑resources/velocity.properties</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">file.resource.loader.path</span>=<span class=\"hljs-string\">/INSTALL_PATH/tubemq-server-[TUBEMQ-VERSION]-bin/resources/templates</span>\n</code></pre>\n<ul>\n<li>（可选）生产环境，多master HA级别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HA级别</th>\n<th>Master数量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高</td>\n<td>3 masters</td>\n<td>任何主节点崩溃后，集群元数据仍处于读/写状态，可以接受新的生产者/消费者。</td>\n</tr>\n<tr>\n<td>中</td>\n<td>2 masters</td>\n<td>一个主节点崩溃后，集群元数据处于只读状态。对现有的生产者和消费者没有任何影响。</td>\n</tr>\n<tr>\n<td>低</td>\n<td>1 master</td>\n<td>主节点崩溃后，对现有的生产者和消费者没有影响。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：需保证Master所有节点之间的时钟同步</p>\n<h4>配置Broker</h4>\n<p>编辑<code>conf/broker.ini</code>，根据集群信息变更以下配置项</p>\n<ul>\n<li>Broker IP和端口</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[broker]</span>\n<span class=\"hljs-attr\">brokerId</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP                 // 替换为当前主机IP，broker目前只支持IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8123</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8081</span>\n</code></pre>\n<ul>\n<li>Master地址</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">masterAddressList</span>=MASTER_NODE_IP:<span class=\"hljs-number\">8000</span>   //多个master以逗号分隔\n</code></pre>\n<ul>\n<li>数据目录</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-attr\">primaryPath</span>=/stage/msgdata\n</code></pre>\n<ul>\n<li>ZooKeeper集群地址</li>\n</ul>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>             // 指向zookeeper集群，多个地址逗号分开\n</code></pre>\n<h4>启动Master</h4>\n<p>进入Master节点的 <code>bin</code> 目录下，启动服务:</p>\n<pre><code class=\"language-bash\">./tubemq master start\n</code></pre>\n<p>访问Master的管控台 <code>http://YOUR_MASTER_IP:8080</code> ，页面可查则表示master已成功启动:</p>\n<p><img src=\"img/tubemq-console-gui.png\" alt=\"TubeMQ Console GUI\"></p>\n<h4>配置Broker元数据</h4>\n<p>Broker启动前，首先要在Master上配置Broker元数据，增加Broker相关的管理信息。在<code>Broker List</code> 页面,  <code>Add Single Broker</code>，然后填写相关信息:</p>\n<p><img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 1\"></p>\n<p>需要填写的内容包括：</p>\n<ol>\n<li>broker IP: broker server ip</li>\n<li>authToken:  <code>conf/master.ini</code> 文件中 <code>confModAuthToken</code> 字段配置的 token</li>\n</ol>\n<p>然后上线Broker：</p>\n<p><img src=\"img/tubemq-add-broker-2.png\" alt=\"Add Broker 2\"></p>\n<h4>启动Broker</h4>\n<p>进入broker节点的 <code>bin</code> 目录下，执行以下命令启动Broker服务：</p>\n<pre><code class=\"language-bash\">./tubemq broker start\n</code></pre>\n<p>刷新页面可以看到 Broker 已经注册，当 <code>当前运行子状态</code> 为 <code>idle</code> 时， 可以增加topic。</p>\n<p><img src=\"img/tubemq-add-broker-3.png\" alt=\"Add Broker 3\"></p>\n<h2>快速使用</h2>\n<h3>新增 Topic</h3>\n<p>可以通过 web GUI 添加 Topic， 在 <code>Topic列表</code>页面添加，需要填写相关信息，比如增加<code>demo</code> topic：</p>\n<p><img src=\"img/tubemq-add-topic-1.png\" alt=\"Add Topic 1\"></p>\n<p>然后选择部署 Topic 的 Broker</p>\n<p><img src=\"img/tubemq-add-topic-5.png\" alt=\"Add Topic 5\"></p>\n<p>此时 Broker的 <code>可发布</code> 和 <code>可订阅</code> 依旧是灰色的</p>\n<p><img src=\"img/tubemq-add-topic-6.png\" alt=\"Add Topic 6\"></p>\n<p>需要在 <code>Broker列表</code>页面重载Broker 配置</p>\n<p><img src=\"img/tubemq-add-topic-2.png\" alt=\"Add Topic 2\"></p>\n<p><img src=\"img/tubemq-add-topic-3.png\" alt=\"Add Topic 3\"></p>\n<p>之后就可以在页面查看Topic信息。</p>\n<p><img src=\"img/tubemq-add-topic-4.png\" alt=\"Add Topic 4\"></p>\n<h3>运行Example</h3>\n<p>可以通过上面创建的<code>demo</code> topic来测试集群。</p>\n<ul>\n<li>生产消息</li>\n</ul>\n<p>将 <code>YOUR_MASTER_IP</code> 替换为实际的IP，然后运行producer:</p>\n<pre><code class=\"language-bash\">install_path=/INSTALL_PATH/tubemq-server-[TUBEMQ-VERSION]-bin\njava -Dlog4j.configuration=file:<span class=\"hljs-variable\">${install_path}</span>/conf/tools.log4j.properties  \\\n-Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp  <span class=\"hljs-variable\">${install_path}</span>/lib/*:<span class=\"hljs-variable\">${install_path}</span>/conf/* \\\norg.apache.tubemq.example.MessageProducerExample \\\nYOUR_MASTER_IP:8000 demo 100000\n</code></pre>\n<p>如果能观察下如下日志，则表示数据发送成功：</p>\n<pre><code class=\"language-bash\">[2020-06-04 11:19:04,405] INFO Send demo 1000 message, keyCount is 252 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:04,652] INFO Send demo 2000 message, keyCount is 502 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:05,096] INFO Send demo 3000 message, keyCount is 752 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:05,181] INFO Send demo 4000 message, keyCount is 1002 (org.apache.tubemq.example.MessageProducerExample)\n</code></pre>\n<ul>\n<li>消费消息</li>\n</ul>\n<p>将 <code>YOUR_MASTER_IP</code> 替换为实际的IP，然后运行Consumer:</p>\n<pre><code class=\"language-bash\">install_path=/INSTALL_PATH/tubemq-server-[TUBEMQ-VERSION]-bin\njava -Xmx512m -Dlog4j.configuration=file:<span class=\"hljs-variable\">${install_path}</span>/conf/tools.log4j.properties \\\n-Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp <span class=\"hljs-variable\">${install_path}</span>/lib/*:<span class=\"hljs-variable\">${install_path}</span>/conf/* \\\norg.apache.tubemq.example.MessageConsumerExample \\\nYOUR_MASTER_IP:8000 demo demoGroup 3 1 1\n</code></pre>\n<p>如果能观察下如下日志，则表示数据被消费者消费到：</p>\n<pre><code class=\"language-bash\">[2020-06-04 11:20:29,107] INFO Receive messages:270000 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,206] INFO Receive messages:272500 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,590] INFO Receive messages:275000 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,910] INFO Receive messages:277500 (org.apache.tubemq.example.MsgRecvStats)\n</code></pre>\n<hr>\n",
  "link": "/zh-cn/docs/quick_start.html",
  "meta": {
    "title": "快速开始 - Apache TubeMQ"
  }
}