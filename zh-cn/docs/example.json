{
  "filename": "example.md",
  "__html": "<p>本节用一个简单的示例，帮助您使用 Docker 快速体验 InLong 的完整流程。</p>\n<h2>安装 Hive</h2>\n<p>Hive 是运行的必备组件。如果您的机器上没有 Hive，这里推荐使用 Docker 进行快速安装，详情可见 <a href=\"https://github.com/big-data-europe/docker-hive\">这里</a>。</p>\n<blockquote>\n<p>注意，如果使用以上 Docker 镜像的话，我们需要在 namenode 中添加一个端口映射 <code>8020:8020</code>，因为它是 HDFS DefaultFS 的端口，后面在配置 Hive 时需要用到。</p>\n</blockquote>\n<h2>安装 InLong</h2>\n<p>在开始之前，我们需要安装 InLong 的全部组件，这里提供两种方式：</p>\n<ol>\n<li>按照 <a href=\"https://github.com/apache/incubator-inlong/tree/master/docker/docker-compose\">这里的说明</a>，使用 Docker 进行快速部署。（推荐）</li>\n<li>按照 <a href=\"./quick_start.md\">这里的说明</a>，使用二进制包依次安装各组件。</li>\n</ol>\n<h2>新建接入</h2>\n<p>部署完毕后，首先我们进入 “数据接入” 界面，点击右上角的 “新建接入”，新建一条接入，按下图所示填入业务信息</p>\n<img src=\"../../img/create-business.png\" align=\"center\" alt=\"Create Business\"/>\n<p>然后点击下一步，按下图所示填入数据流信息</p>\n<img src=\"../../img/create-stream.png\" align=\"center\" alt=\"Create Stream\"/>\n<p>注意其中消息来源选择“文件”，暂时不用新建数据源。</p>\n<p>然后我们在下面的“数据信息”一栏中填入以下信息</p>\n<img src=\"../../img/data-information.png\" align=\"center\" alt=\"Data Information\"/>\n<p>然后在数据流向中选择 Hive，并点击 “添加”，添加 Hive 配置</p>\n<img src=\"../../img/hive-config.png\" align=\"center\" alt=\"Hive Config\"/>\n<p>注意这里目标表无需提前创建，InLong Manager 会在接入通过之后自动为我们创建表。另外，请使用 “连接测试” 保证 InLong Manager 可以连接到你的 Hive。</p>\n<p>然后点击“提交审批”按钮，该接入就会创建成功，进入审批状态。</p>\n<h2>审批接入</h2>\n<p>进入“审批管理”界面，点击“我的审批”，将刚刚申请的接入通过。</p>\n<p>到此接入就已经创建完毕了，我们可以在 Hive 中看到相应的表已经被创建，并且在 TubeMQ 的管理界面中可以看到相应的 topic 已经创建成功。</p>\n<h2>配置 agent</h2>\n<p>然后我们使用 docker 进入 agent 容器内，创建相应的 agent 配置。</p>\n<pre><code>$ docker exec -it agent sh\n</code></pre>\n<p>然后我们新建 <code>.inlong</code> 文件夹，并创建以 <code>bid.local</code> 命名的文件，在其中填入 Dataproxy 有关配置。</p>\n<pre><code>$ mkdir .inlong\n$ cd .inlong\n$ touch b_test.local\n$ echo '{&quot;cluster_id&quot;:1,&quot;isInterVisit&quot;:1,&quot;size&quot;:1,&quot;address&quot;: [{&quot;port&quot;:46801,&quot;host&quot;:&quot;dataproxy&quot;}], &quot;switch&quot;:0}' &gt;&gt; b_test.local\n</code></pre>\n<p>然后退出容器，使用 curl 向 agent 容器发送请求。</p>\n<pre><code>curl --location --request POST 'http://localhost:8008/config/job' \\\n--header 'Content-Type: application/json' \\\n--data '{\n&quot;job&quot;: {\n&quot;dir&quot;: {\n&quot;path&quot;: &quot;&quot;,\n&quot;pattern&quot;: &quot;/data/collect-data/test.log&quot;\n},\n&quot;trigger&quot;: &quot;org.apache.inlong.agent.plugin.trigger.DirectoryTrigger&quot;,\n&quot;id&quot;: 1,\n&quot;thread&quot;: {\n&quot;running&quot;: {\n&quot;core&quot;: &quot;4&quot;\n}\n},\n&quot;name&quot;: &quot;fileAgentTest&quot;,\n&quot;source&quot;: &quot;org.apache.inlong.agent.plugin.sources.TextFileSource&quot;,\n&quot;sink&quot;: &quot;org.apache.inlong.agent.plugin.sinks.ProxySink&quot;,\n&quot;channel&quot;: &quot;org.apache.inlong.agent.plugin.channel.MemoryChannel&quot;\n},\n&quot;proxy&quot;: {\n&quot;bid&quot;: &quot;b_test&quot;,\n&quot;tid&quot;: &quot;test_stream&quot;\n},\n&quot;op&quot;: &quot;add&quot;\n}'\n</code></pre>\n<p>至此，agent 就配置完毕了。接下来我们可以新建 <code>./collect-data/test.log</code> ，并往里面添加内容，来触发 agent 向 dataproxy 发送数据了。</p>\n<pre><code>$ touch collect-data/test.log\n$ echo 'test,24' &gt;&gt; collect-data/test.log\n</code></pre>\n<p>然后观察 agent 和 dataproxy 的日志，可以看到相关数据已经成功发送。</p>\n<pre><code>$ docker logs agent\n$ docker logs dataproxy\n</code></pre>\n",
  "link": "/zh-cn/docs/example.html",
  "meta": {
    "title": "入库 Hive 示例 - Apache InLong"
  }
}